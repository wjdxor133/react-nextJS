{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from \"redux\";\nimport user from \"./user\";\nimport post from \"./post\"; // const initialState = {\n//   user: {\n//     isLoggedIn: false,\n//     user: null,\n//     signUpData: {},\n//     loginData: {},\n//   },\n//   post: {\n//     mainPosts: [],\n//   },\n// };\n// action creator\n// export const loginAction = (data) => {\n//   return {\n//     type: \"LOG_IN\",\n//     data,\n//   };\n// };\n// export const logoutAction = () => {\n//   return {\n//     type: \"LOG_OUT\",\n//   };\n// };\n// combineReducer를 통해서 user,post의 initialStater값을 알아서 합쳐서 넣어줌\n\nconst rootReducer = combineReducers({\n  // 리덕스 사버 사이드 렌더링 때문에 HYDRATE를 위해 리듀서를 추가한 것\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log(\"HYDRATE\", action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n}); // const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case HYDRATE:\n//       console.log(\"HYDRATE\", action);\n//       return { ...state, ...action.payload };\n//     case \"LOG_IN\":\n//       return {\n//         ...state,\n//         user: {\n//           ...state.user,\n//           isLoggedIn: true,\n//           user: action.data,\n//         },\n//       };\n//     case \"LOG_OUT\":\n//       return {\n//         ...state,\n//         user: {\n//           ...state.user,\n//           isLoggedIn: false,\n//           user: null,\n//         },\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/taek2/dev/zeroCho_project/react-nextJS/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,WAAW,GAAGH,eAAe,CAAC;AAClC;AACAI,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC7B,YAAQA,MAAM,CAACC,IAAf;AACE,WAAKR,OAAL;AACES,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AACF;AACE,eAAOL,KAAP;AALJ;AAOD,GAViC;AAWlCJ,EAAAA,IAXkC;AAYlCC,EAAAA;AAZkC,CAAD,CAAnC,C,CAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeC,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from \"redux\";\nimport user from \"./user\";\nimport post from \"./post\";\n\n// const initialState = {\n//   user: {\n//     isLoggedIn: false,\n//     user: null,\n//     signUpData: {},\n//     loginData: {},\n//   },\n//   post: {\n//     mainPosts: [],\n//   },\n// };\n\n// action creator\n// export const loginAction = (data) => {\n//   return {\n//     type: \"LOG_IN\",\n//     data,\n//   };\n// };\n\n// export const logoutAction = () => {\n//   return {\n//     type: \"LOG_OUT\",\n//   };\n// };\n\n// combineReducer를 통해서 user,post의 initialStater값을 알아서 합쳐서 넣어줌\nconst rootReducer = combineReducers({\n  // 리덕스 사버 사이드 렌더링 때문에 HYDRATE를 위해 리듀서를 추가한 것\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log(\"HYDRATE\", action);\n        return { ...state, ...action.payload };\n      default:\n        return state;\n    }\n  },\n  user,\n  post,\n});\n\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case HYDRATE:\n//       console.log(\"HYDRATE\", action);\n//       return { ...state, ...action.payload };\n//     case \"LOG_IN\":\n//       return {\n//         ...state,\n//         user: {\n//           ...state.user,\n//           isLoggedIn: true,\n//           user: action.data,\n//         },\n//       };\n//     case \"LOG_OUT\":\n//       return {\n//         ...state,\n//         user: {\n//           ...state.user,\n//           isLoggedIn: false,\n//           user: null,\n//         },\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}