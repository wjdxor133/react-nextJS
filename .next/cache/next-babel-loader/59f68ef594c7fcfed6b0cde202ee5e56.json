{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducer } from \"redux\";\nimport user from \"./user\";\nimport post from \"./post\"; // const initialState = {\n//   user: {\n//     isLoggedIn: false,\n//     user: null,\n//     signUpData: {},\n//     loginData: {},\n//   },\n//   post: {\n//     mainPosts: [],\n//   },\n// };\n// action creator\n\nexport var loginAction = function loginAction(data) {\n  return {\n    type: \"LOG_IN\",\n    data: data\n  };\n};\nexport var logoutAction = function logoutAction() {\n  return {\n    type: \"LOG_OUT\"\n  };\n};\nvar rootReducer = combineReducer({\n  index: function index() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    switch (action.type) {\n      case HYDRATE:\n        console.log(\"HYDRATE\", action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user: user,\n  post: post\n}); // const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case HYDRATE:\n//       console.log(\"HYDRATE\", action);\n//       return { ...state, ...action.payload };\n//     case \"LOG_IN\":\n//       return {\n//         ...state,\n//         user: {\n//           ...state.user,\n//           isLoggedIn: true,\n//           user: action.data,\n//         },\n//       };\n//     case \"LOG_OUT\":\n//       return {\n//         ...state,\n//         user: {\n//           ...state.user,\n//           isLoggedIn: false,\n//           user: null,\n//         },\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/taek2/dev/zeroCho_project/react-nextJS/reducers/index.js"],"names":["HYDRATE","combineReducer","user","post","loginAction","data","type","logoutAction","rootReducer","index","state","action","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAU;AACnC,SAAO;AACLC,IAAAA,IAAI,EAAE,QADD;AAELD,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,GAAM;AAChC,SAAO;AACLD,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,IAAME,WAAW,GAAGP,cAAc,CAAC;AACjCQ,EAAAA,KAAK,EAAE,iBAAwB;AAAA,QAAvBC,KAAuB,uEAAf,EAAe;AAAA,QAAXC,MAAW;;AAC7B,YAAQA,MAAM,CAACL,IAAf;AACE,WAAKN,OAAL;AACEY,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;AACA,+CAAYD,KAAZ,GAAsBC,MAAM,CAACG,OAA7B;;AACF;AACE,eAAOJ,KAAP;AALJ;AAOD,GATgC;AAUjCR,EAAAA,IAAI,EAAJA,IAViC;AAWjCC,EAAAA,IAAI,EAAJA;AAXiC,CAAD,CAAlC,C,CAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeK,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducer } from \"redux\";\nimport user from \"./user\";\nimport post from \"./post\";\n\n// const initialState = {\n//   user: {\n//     isLoggedIn: false,\n//     user: null,\n//     signUpData: {},\n//     loginData: {},\n//   },\n//   post: {\n//     mainPosts: [],\n//   },\n// };\n\n// action creator\nexport const loginAction = (data) => {\n  return {\n    type: \"LOG_IN\",\n    data,\n  };\n};\n\nexport const logoutAction = () => {\n  return {\n    type: \"LOG_OUT\",\n  };\n};\n\nconst rootReducer = combineReducer({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log(\"HYDRATE\", action);\n        return { ...state, ...action.payload };\n      default:\n        return state;\n    }\n  },\n  user,\n  post,\n});\n\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case HYDRATE:\n//       console.log(\"HYDRATE\", action);\n//       return { ...state, ...action.payload };\n//     case \"LOG_IN\":\n//       return {\n//         ...state,\n//         user: {\n//           ...state.user,\n//           isLoggedIn: true,\n//           user: action.data,\n//         },\n//       };\n//     case \"LOG_OUT\":\n//       return {\n//         ...state,\n//         user: {\n//           ...state.user,\n//           isLoggedIn: false,\n//           user: null,\n//         },\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}